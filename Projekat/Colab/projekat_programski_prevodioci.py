# -*- coding: utf-8 -*-
"""Projekat - Programski Prevodioci

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vypSFtLxzPZLtOl9g1v3i-pJWH9SdTuR
"""

from enum import Enum, auto

class Class(Enum):
  # Promenljive i tipovi podataka
    TYPE = auto()
    INT = auto()
    CHAR = auto()
    STRING = auto()
    REAL = auto()
    BOOLEAN = auto()


  # Binarne i unarne aritmetičke operacije
    PLUS = auto()
    MINUS = auto()
    STAR = auto()
    FWDSLASH = auto()
    PERCENT = auto()
    MOD = auto()
    DIV = auto()


  # Binarne i unarne logičke operacije
    OR = auto()
    AND = auto()
    NOT = auto()
    XOR = auto()


  # Relacione operacije
    EQ = auto()
    NEQ = auto()
    LT = auto()
    GT = auto()
    LTE = auto()
    GTE = auto()


  # If-Else naredba
    IF = auto()
    ELSE = auto()
    THEN = auto()


  # Repeat-Until naredba sa instrukcijama za kontrolu toka
    REPEAT = auto()
    UNTIL = auto()


  # Sve sto ide uz do
    WHILE = auto()
    FOR = auto()
    DO = auto()
    TO = auto()
    DOWNTO = auto()


  # Zagrade
    LPAREN = auto()
    RPAREN = auto()
    LBRACKET = auto()
    RBRACKET = auto()
    LBRACE = auto()
    RBRACE = auto()
    

  # Interpunkijski znakovi
    DOT = auto()
    DOTS = auto()
    ASSIGN = auto()
    SEMICOLON = auto()
    COLON = auto()
    COMMA = auto()


  # Tokovi petlje
    RETURN = auto()
    EXIT = auto()
    BREAK = auto()
    CONTINUE = auto()
    BEGIN = auto()
    END = auto()


  # Promenljive
    VAR = auto()
    PROCEDURE = auto()
    FUNCTION = auto()
    ARRAY = auto()
    ID = auto()
    OF = auto()


  # Ostalo
    ADDRESS = auto()
    EOF = auto()

class Token:
    def __init__(self, class_, lexeme):
        self.class_ = class_
        self.lexeme = lexeme

    def __str__(self):
        return "<{} {}>".format(self.class_, self.lexeme)

class Lexer:
    def __init__(self, text):
        self.text = text
        self.len = len(text)
        self.pos = -1

    def read_space(self):
        while self.pos + 1 < self.len and self.text[self.pos + 1].isspace():
            self.next_char()

    def read_int(self):
        lexeme = self.text[self.pos]   
        while self.pos + 1 < self.len and self.text[self.pos + 1].isdigit():
            lexeme += self.next_char()
        return int(lexeme)

    def read_char(self):
        self.pos += 1
        lexeme = self.text[self.pos]
        self.pos += 1
        return lexeme

    def read_string(self):
        lexeme = ''
        while self.pos + 1 < self.len and self.text[self.pos + 1] != '\'':
            lexeme += self.next_char()
        self.pos += 1
        return lexeme

    def read_keyword(self):
        lexeme = self.text[self.pos]
        while self.pos + 1 < self.len and (self.text[self.pos + 1].isalnum() or self.text[self.pos + 1] == "_"):
            lexeme += self.next_char()
        if lexeme == 'if':
            return Token(Class.IF, lexeme)
        elif lexeme == 'else':
            return Token(Class.ELSE, lexeme)
        elif lexeme == 'while':
            return Token(Class.WHILE, lexeme)
        elif lexeme == 'for':
            return Token(Class.FOR, lexeme)
        elif lexeme == 'break':
            return Token(Class.BREAK, lexeme)
        elif lexeme == 'continue':
            return Token(Class.CONTINUE, lexeme)
        elif lexeme == 'return':
            return Token(Class.RETURN, lexeme)
        # Pocetak izmena
        elif lexeme == 'begin':
            return Token(Class.BEGIN, lexeme)
        elif lexeme == 'end':
            return Token(Class.END, lexeme)
        elif lexeme == 'exit':
            return Token(Class.EXIT, lexeme)
        elif lexeme == 'var':
            return Token(Class.VAR, lexeme)
        elif lexeme == 'do':
            return Token(Class.DO, lexeme)
        elif lexeme == 'to':
            return Token(Class.TO, lexeme)
        elif lexeme == 'downto':
            return Token(Class.DOWNTO, lexeme)
        elif lexeme == 'of':
            return Token(Class.OF, lexeme)
        elif lexeme == 'mod':
            return Token(Class.MOD, lexeme)
        elif lexeme == 'then':
            return Token(Class.THEN, lexeme)
        elif lexeme == 'div':
            return Token(Class.DIV, lexeme)
        elif lexeme == 'xor':
            return Token(Class.XOR, lexeme)
        elif lexeme == 'repeat':
            return Token(Class.REPEAT, lexeme)
        elif lexeme == 'until':
            return Token(Class.UNTIL, lexeme)
        elif lexeme == 'and':
            return Token(Class.AND, lexeme)
        elif lexeme == 'or':
            return Token(Class.OR, lexeme)
        elif lexeme == 'not':
            return Token(Class.NOT, lexeme)
        elif lexeme == 'array':
            return Token(Class.ARRAY, lexeme)
        elif lexeme == 'procedure':
            return Token(Class.PROCEDURE, lexeme)
        elif lexeme == 'function':
            return Token(Class.FUNCTION, lexeme)
        elif lexeme == 'true' or lexeme == "false":
            return Token(Class.BOOLEAN, lexeme)
        # Kraj izmena
        elif lexeme == 'integer' or lexeme == 'char' or lexeme == 'void' or lexeme == 'real' or lexeme == 'boolean' or lexeme == 'string':
            return Token(Class.TYPE, lexeme)
        return Token(Class.ID, lexeme)

    def next_char(self):
        self.pos += 1
        if self.pos >= self.len:
            return None
        return self.text[self.pos]

    def next_token(self):
        self.read_space()
        curr = self.next_char()
        if curr is None:
            return Token(Class.EOF, curr)
        token = None
        if curr.isalpha():
            token = self.read_keyword()
        elif curr.isdigit():
            token = Token(Class.INT, self.read_int())
        elif curr == '\'':
            curr = self.next_char()
            curr = self.next_char()
            if curr == '\'':
                self.pos -= 2
                token = Token(Class.CHAR, self.read_char())
            else:
                self.pos -= 2
                token = Token(Class.STRING, self.read_string())
        elif curr == '+':
            token = Token(Class.PLUS, curr)
        elif curr == '-':
            token = Token(Class.MINUS, curr)
        elif curr == '*':
            token = Token(Class.STAR, curr)
        elif curr == '/':
            token = Token(Class.FWDSLASH, curr)
        elif curr == '%':
            token = Token(Class.PERCENT, curr)
        elif curr == '&':
            curr = self.next_char()
            if curr == '&':
                token = Token(Class.AND, '&&')
            else:
                token = Token(Class.ADDRESS, '&')
                self.pos -= 1
        elif curr == '|':
            curr = self.next_char()
            if curr == '|':
                token = Token(Class.OR, '||')
            else:
                self.die(curr)
        elif curr == '=':
            token = Token(Class.EQ, '=')
        elif curr == '<':
            curr = self.next_char()
            if curr == '=':
                token = Token(Class.LTE, '<=')
            elif curr == '>':
                token = Token(Class.NEQ, '<>')
            else:
                token = Token(Class.LT, '<')
                self.pos -= 1
        elif curr == '>':
            curr = self.next_char()
            if curr == '=':
                token = Token(Class.GTE, '>=')
            else:
                token = Token(Class.GT, '>')
                self.pos -= 1
        elif curr == '(':
            token = Token(Class.LPAREN, curr)
        elif curr == ')':
            token = Token(Class.RPAREN, curr)
        elif curr == '[':
            token = Token(Class.LBRACKET, curr)
        elif curr == ']':
            token = Token(Class.RBRACKET, curr)
        elif curr == '{':
            token = Token(Class.LBRACE, curr)
        elif curr == '}':
            token = Token(Class.RBRACE, curr)
        elif curr == ';':
            token = Token(Class.SEMICOLON, curr)
        elif curr == ':':
            curr = self.next_char()
            if curr == '=':
                token = Token(Class.ASSIGN, ':=')
            else:
                token = Token(Class.COLON, ':')
                self.pos -= 1
        elif curr == '.':
            curr = self.next_char()
            if curr == '.':
                token = Token(Class.DOTS, '..')
            else:
                token = Token(Class.DOT, '.')
                self.pos -= 1
        elif curr == ',':
            token = Token(Class.COMMA, curr)
        else:
            self.die(curr)
        return token

    def lex(self):
        tokens = []
        while True:
            curr = self.next_token()
            tokens.append(curr)
            if curr.class_ == Class.EOF:
                break
        return tokens

    def die(self, char):
        raise SystemExit("Unexpected character: {}".format(char))

class Node():
    pass


class Program(Node):
    def __init__(self, nodes):
        self.nodes = nodes


class Decl(Node):
    def __init__(self, type_, id_):
        self.type_ = type_
        self.id_ = id_


class ArrayDecl(Node):
    def __init__(self, type_, id_, size, elems):
        self.type_ = type_
        self.id_ = id_
        self.size = size
        self.elems = elems


class ArrayElem(Node):
    def __init__(self, id_, index):
        self.id_ = id_
        self.index = index


class Assign(Node):
    def __init__(self, id_, expr):
        self.id_ = id_
        self.expr = expr


class If(Node):
    def __init__(self, cond, true, false):
        self.cond = cond
        self.true = true
        self.false = false


class While(Node):
    def __init__(self, cond, block):
        self.cond = cond
        self.block = block


class For(Node):
    def __init__(self, init, endExpr, block):
        self.init = init
        self.endExpr = endExpr
        self.block = block


class ForDown(Node):
    def __init__(self, init, endExpr, block):
        self.init = init
        self.endExpr = endExpr
        self.block = block


class Repeat(Node):
    def __init__(self, cond, block):
        self.cond = cond
        self.block = block


class FuncImpl(Node):
    def __init__(self, type_, id_, params, block, vars):
        self.type_ = type_
        self.id_ = id_
        self.params = params
        self.block = block
        self.vars = vars


class ProcImpl(Node):
    def __init__(self, id_, params, block, vars):
        self.id_ = id_
        self.params = params
        self.block = block
        self.vars = vars


class FuncCall(Node):
    def __init__(self, id_, args):
        self.id_ = id_
        self.args = args


class Block(Node):
    def __init__(self, nodes):
        self.nodes = nodes


class Params(Node):
    def __init__(self, params):
        self.params = params

class Vars(Node):
    def __init__(self, vars):
        self.vars = vars


class Args(Node):
    def __init__(self, args, dec):
        self.args = args
        self.dec = dec


class Elems(Node):
    def __init__(self, elems):
        self.elems = elems


class Break(Node):
    pass


class Continue(Node):
    pass


class Exit(Node):
    def __init__(self, expr):
        self.expr = expr


class Return(Node):
    def __init__(self, expr):
        self.expr = expr


class Type(Node):
    def __init__(self, value):
        self.value = value


class Int(Node):
    def __init__(self, value):
        self.value = value


class Char(Node):
    def __init__(self, value):
        self.value = value


class String(Node):
    def __init__(self, value):
        self.value = value


class Boolean(Node):
    def __init__(self, value):
        self.value = value


class Real(Node):
    def __init__(self, value):
        self.value = value


class Id(Node):
    def __init__(self, value):
        self.value = value


class BinOp(Node):
    def __init__(self, symbol, first, second):
        self.symbol = symbol
        self.first = first
        self.second = second


class UnOp(Node):
    def __init__(self, symbol, first):
        self.symbol = symbol
        self.first = first

class Visitor():
    def visit(self, parent, node):
        method = 'visit_' + type(node).__name__
        visitor = getattr(self, method, self.die)
        return visitor(parent, node)

    def die(self, parent, node):
        method = 'visit_' + type(node).__name__
        raise SystemExit("Missing method: {}".format(method))

from functools import wraps
import pickle

class Parser:
    def __init__(self, tokens):
        self.tokens = tokens
        self.curr = tokens.pop(0)
        self.prev = None
        self.flag = 0

    def restorable(call):
        @wraps(call)
        def wrapper(self, *args, **kwargs):
            state = pickle.dumps(self.__dict__)
            result = call(self, *args, **kwargs)
            self.__dict__ = pickle.loads(state)
            return result
        return wrapper

    def eat(self, class_):
        # print(self.curr.class_)
        if self.curr.class_ == class_:
            self.prev = self.curr
            self.curr = self.tokens.pop(0)
        else:
            self.die_type(class_.name, self.curr.class_.name)

    def program(self):
        nodes = []
        while self.curr.class_ != Class.EOF:
            if self.curr.class_ == Class.VAR:
                self.eat(Class.VAR)
                while self.curr.class_ != Class.BEGIN: 
                    declarations_ = self.decl()
                    self.eat(Class.SEMICOLON)
                    for i in declarations_:
                        nodes.append(i) 
            elif self.curr.class_ == Class.FUNCTION:
                nodes.append(self.declFun())
            elif self.curr.class_ == Class.PROCEDURE:
                nodes.append(self.declProc())
            elif self.curr.class_ == Class.BEGIN:
                self.eat(Class.BEGIN)
                nodes.append(self.block())
                self.eat(Class.END)
                self.eat(Class.DOT)
            else:
                self.die_deriv(self.program.__name__)
        return Program(nodes)

    def id_(self):
        is_array_elem = self.prev.class_ != Class.TYPE
        id_ = Id(self.curr.lexeme)
        self.eat(Class.ID)
        if self.curr.class_ == Class.LPAREN and self.is_func_call():
            self.eat(Class.LPAREN)
            args = self.args()
            self.eat(Class.RPAREN)
            return FuncCall(id_, args)
        elif self.curr.class_ == Class.LBRACKET and is_array_elem:
            self.eat(Class.LBRACKET)
            index = self.expr()
            self.eat(Class.RBRACKET)
            id_ = ArrayElem(id_, index)
        if self.curr.class_ == Class.ASSIGN:
            self.eat(Class.ASSIGN)
            compare = self.compare()
            return Assign(id_, compare)
        else:
            return id_

    def decl(self):
        # type_ = self.type_()
        declarations_ = []
        ids = list(self.ids_var())
        self.eat(Class.COLON)
        if self.curr.class_ == Class.ARRAY:
            self.eat(Class.ARRAY)
            self.eat(Class.LBRACKET)
            self.expr()
            self.eat(Class.DOTS)
            size = self.expr()
            self.eat(Class.RBRACKET)
            self.eat(Class.OF)
            type_ = self.type_()
            elems = None
            if self.curr.class_ == Class.EQ:
                self.eat(Class.EQ)
                self.eat(Class.LPAREN)
                elems = self.elems()
                self.eat(Class.RPAREN)
            for id_ in ids: 
                declarations_.append(ArrayDecl(type_, id_, size, elems))

        else:
            type_ = self.type_()
            if self.curr.class_ == Class.LBRACKET:
                self.eat(Class.LBRACKET)
                size = self.expr()
                self.eat(Class.RBRACKET)
                for id_ in ids: 
                    declarations_.append(ArrayDecl(type_, id_, size, Elems([])))
            else:
                for id_ in ids: 
                    declarations_.append(Decl(type_, id_))
        
        return declarations_

    def declFun(self):
        self.eat(Class.FUNCTION)
        id_ = self.id_()
        self.eat(Class.LPAREN)
        params = Params(self.decl())
        self.eat(Class.RPAREN)
        self.eat(Class.COLON)
        type_ = self.type_()
        self.eat(Class.SEMICOLON)
        vars = []
        if self.curr.class_ == Class.VAR:
            self.eat(Class.VAR)
            while self.curr.class_ != Class.BEGIN:
                declarations_ = self.decl()
                self.eat(Class.SEMICOLON)
                for i in declarations_:
                    vars.append(i)
        self.eat(Class.BEGIN)
        block = self.block()
        self.eat(Class.END)
        self.eat(Class.SEMICOLON)
        return FuncImpl(type_, id_, params, block, Vars(vars))

    def declProc(self):
        self.eat(Class.PROCEDURE)
        id_ = self.id_()
        self.eat(Class.LPAREN)
        params = Params(self.decl())
        self.eat(Class.RPAREN)
        self.eat(Class.SEMICOLON)
        vars = []
        if self.curr.class_ == Class.VAR:
            self.eat(Class.VAR)
            while self.curr.class_ != Class.BEGIN:
                declarations_ = self.decl()
                self.eat(Class.SEMICOLON)
                for i in declarations_:
                    vars.append(i) 
        self.eat(Class.BEGIN)
        block = self.block()
        self.eat(Class.END)
        self.eat(Class.SEMICOLON)
        return ProcImpl(id_, params, block, Vars(vars))

    def if_(self):
        self.eat(Class.IF)
        cond = self.logic()
        self.eat(Class.THEN)
        self.eat(Class.BEGIN)
        true = self.block()
        self.eat(Class.END)
        false = None
        if self.curr.class_ == Class.ELSE:
            self.eat(Class.ELSE)
            self.eat(Class.BEGIN)
            false = self.block()
            self.eat(Class.END)
            self.eat(Class.SEMICOLON)
        else:
            self.eat(Class.SEMICOLON)
        return If(cond, true, false)

    def while_(self):
        self.eat(Class.WHILE)
        cond = self.logic()
        self.eat(Class.DO)
        self.eat(Class.BEGIN)
        block = self.block()
        self.eat(Class.END)
        self.eat(Class.SEMICOLON)
        return While(cond, block)

    def for_(self):
        self.eat(Class.FOR)
        init = self.expr()
        if self.curr.class_ == Class.TO:
            self.eat(Class.TO)
            endExpr = self.expr()
            self.eat(Class.DO)
            self.eat(Class.BEGIN)
            block = self.block()
            self.eat(Class.END)
            self.eat(Class.SEMICOLON)
            return For(init, endExpr, block)
        else:
            self.eat(Class.DOWNTO)
            endExpr = self.expr()
            self.eat(Class.DO)
            self.eat(Class.BEGIN)
            block = self.block()
            self.eat(Class.END)
            self.eat(Class.SEMICOLON)
            return ForDown(init, endExpr, block)

    def repeat_(self):
        self.eat(Class.REPEAT)
        block = self.block()
        self.eat(Class.UNTIL)
        cond = self.logic()
        self.eat(Class.SEMICOLON)
        return Repeat(cond, block)

    def block(self):
        nodes = []
        while self.curr.class_ != Class.END:
            if self.curr.class_ == Class.IF:
                nodes.append(self.if_())
            elif self.curr.class_ == Class.WHILE:
                nodes.append(self.while_())
            elif self.curr.class_ == Class.REPEAT:
                nodes.append(self.repeat_())
            elif self.curr.class_ == Class.FOR:
                nodes.append(self.for_())
            elif self.curr.class_ == Class.BREAK:
                nodes.append(self.break_())
            elif self.curr.class_ == Class.CONTINUE:
                nodes.append(self.continue_())
            elif self.curr.class_ == Class.EXIT:
                nodes.append(self.exit_())
            elif self.curr.class_ == Class.RETURN:
                nodes.append(self.return_())
            elif self.curr.class_ == Class.TYPE:
                nodes.append(self.decl())
            elif self.curr.class_ == Class.ID:  
                nodes.append(self.id_())
                self.eat(Class.SEMICOLON)
            elif self.curr.class_ == Class.UNTIL:
                break
            else:
                self.die_deriv(self.block.__name__)
        return Block(nodes)

    def ids_var(self):
        ids = []
        while self.curr.class_ != Class.COLON:
            if len(ids) > 0:
                self.eat(Class.COMMA)
            ids.append(self.expr())
        return ids

    def params(self):
        params = []
        while self.curr.class_ != Class.COLON:
            if len(params) > 0:
                self.eat(Class.COMMA)
            type_ = self.type_()
            id_ = self.id_()
            params.append(Decl(type_, id_))
        return Params(params)

    def args(self):
        args = []
        decimals = None
        while self.curr.class_ != Class.RPAREN:
            if len(args) > 0:
                self.eat(Class.COMMA)
            args.append(self.expr())

            decimals = None

            if self.curr.class_ == Class.COLON:
                  self.eat(Class.COLON)
                  self.eat(Class.INT)
                  self.eat(Class.COLON)
                  decimals = self.expr()
        return Args(args, decimals)

    def elems(self):
        elems = []
        while self.curr.class_ != Class.RPAREN:
            if len(elems) > 0:
                self.eat(Class.COMMA)
            elems.append(self.expr())
            if self.curr.class_ == Class.INT:
                self.eat(Class.INT)
            elif self.curr.class_ == Class.CHAR:
                self.eat(Class.CHAR)
            elif self.curr.class_ == Class.STRING:
                self.eat(Class.STRING)
            elif self.curr.class_ == Class.BOOLEAN:
                self.eat(Class.BOOLEAN)
            elif self.curr.class_ == Class.REAL:
                self.eat(Class.REAL)
        return Elems(elems)

    def return_(self):
        self.eat(Class.RETURN)
        expr = self.expr()
        self.eat(Class.SEMICOLON)
        return Return(expr)

    def break_(self):
        self.eat(Class.BREAK)
        self.eat(Class.SEMICOLON)
        return Break()

    def continue_(self):
        self.eat(Class.CONTINUE)
        self.eat(Class.SEMICOLON)
        return Continue()

    def exit_(self):
        self.eat(Class.EXIT)
        expr = self.expr()
        self.eat(Class.SEMICOLON)
        return Exit(expr)

    def type_(self):
        type_ = Type(self.curr.lexeme)
        self.eat(Class.TYPE)
        return type_

    def factor(self):
        if self.curr.class_ == Class.INT:
            value = Int(self.curr.lexeme)
            self.eat(Class.INT)
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return value
        elif self.curr.class_ == Class.CHAR:
            value = Char(self.curr.lexeme)
            self.eat(Class.CHAR)
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return value
        elif self.curr.class_ == Class.STRING:
            value = String(self.curr.lexeme)
            self.eat(Class.STRING)
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return value
        elif self.curr.class_ == Class.BOOLEAN:
            value = Boolean(self.curr.lexeme)
            self.eat(Class.BOOLEAN)
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return value
        elif self.curr.class_ == Class.REAL:
            value = Real(self.curr.lexeme)
            self.eat(Class.REAL)
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return value
        elif self.curr.class_ == Class.ID:
            if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                self.eat(Class.RPAREN)
                self.flag = 0
            return self.id_()
        elif self.curr.class_ in [Class.MINUS, Class.NOT, Class.ADDRESS]:
            op = self.curr
            self.eat(self.curr.class_)
            first = None
            if self.curr.class_ == Class.LPAREN:
                self.eat(Class.LPAREN)
                first = self.logic()
                self.eat(Class.RPAREN)
            else:
                first = self.factor()
            return UnOp(op.lexeme, first)
        elif self.curr.class_ == Class.LPAREN:
            self.eat(Class.LPAREN)
            first = self.logic()
            self.eat(Class.RPAREN)
            return first
        elif self.curr.class_ == Class.ID:
            id_ = self.id_()
        elif self.curr.class_ == Class.SEMICOLON:
            return None
        else:
            self.die_deriv(self.factor.__name__)

    def term(self):
        first = self.factor()
        while self.curr.class_ in [Class.STAR, Class.FWDSLASH, Class.PERCENT]:
            if self.curr.class_ == Class.STAR:
                op = self.curr.lexeme
                self.eat(Class.STAR)
                second = self.factor()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
            elif self.curr.class_ == Class.FWDSLASH:
                op = self.curr.lexeme
                self.eat(Class.FWDSLASH)
                second = self.factor()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
            elif self.curr.class_ == Class.PERCENT:
                op = self.curr.lexeme
                self.eat(Class.PERCENT)
                second = self.factor()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
        return first

    def expr(self):
        if self.curr.class_ == Class.LPAREN:
            self.eat(Class.LPAREN)
            self.flag = 1
        first = self.term()
        while self.curr.class_ in [Class.PLUS, Class.MINUS, Class.DIV, Class.MOD]:
            if self.curr.class_ == Class.PLUS:
                op = self.curr.lexeme
                self.eat(Class.PLUS)
                second = self.term()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
            elif self.curr.class_ == Class.MINUS:
                op = self.curr.lexeme
                self.eat(Class.MINUS)
                second = self.term()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
            elif self.curr.class_ == Class.DIV:
                op = self.curr.lexeme
                self.eat(Class.DIV)
                second = self.term()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0
            elif self.curr.class_ == Class.MOD:
                op = self.curr.lexeme
                self.eat(Class.MOD)
                second = self.term()
                first = BinOp(op, first, second)
                if self.flag == 1 and self.curr.class_ == Class.RPAREN:
                    self.eat(Class.RPAREN)
                    self.flag = 0

        return first

    def compare(self):
        first = self.expr()
        if self.curr.class_ == Class.EQ:
            op = self.curr.lexeme
            self.eat(Class.EQ)
            second = self.expr()
            return BinOp(op, first, second)
        elif self.curr.class_ == Class.NEQ:
            op = self.curr.lexeme
            self.eat(Class.NEQ)
            second = self.expr()
            return BinOp(op, first, second)
        elif self.curr.class_ == Class.LT:
            op = self.curr.lexeme
            self.eat(Class.LT)
            second = self.expr()
            return BinOp(op, first, second)
        elif self.curr.class_ == Class.GT:
            op = self.curr.lexeme
            self.eat(Class.GT)
            second = self.expr()
            return BinOp(op, first, second)
        elif self.curr.class_ == Class.LTE:
            op = self.curr.lexeme
            self.eat(Class.LTE)
            second = self.expr()
            return BinOp(op, first, second)
        elif self.curr.class_ == Class.GTE:
            op = self.curr.lexeme
            self.eat(Class.GTE)
            second = self.expr()
            return BinOp(op, first, second)
        else:
            return first

    def logic(self):
        first = self.compare()
        while self.curr.class_ in [Class.OR, Class.AND, Class.XOR]:
            if self.curr.class_ == Class.AND:
                op = self.curr.lexeme
                self.eat(Class.AND)
                second = self.compare()
                first = BinOp(op, first, second)
            elif self.curr.class_ == Class.OR:
                op = self.curr.lexeme
                self.eat(Class.OR)
                second = self.compare()
                first = BinOp(op, first, second)
            elif self.curr.class_ == Class.XOR:
                op = self.curr.lexeme
                self.eat(Class.XOR)
                second = self.compare()
                first = BinOp(op, first, second)
        return first

    @restorable
    def is_func_call(self):
        try:
            self.eat(Class.LPAREN)
            self.args()
            self.eat(Class.RPAREN)
            # return self.curr.class_ == Class.SEMICOLON
            return True
        except:
            return False

    def parse(self):
        return self.program()

    def die(self, text):
        raise SystemExit(text)

    def die_deriv(self, fun):
        self.die("Derivation error: {}".format(fun))

    def die_type(self, expected, found):
        self.die("Expected: {}, Found: {}".format(expected, found))

class Symbol:
    def __init__(self, id_, type_, scope):
        self.id_ = id_
        self.type_ = type_
        self.scope = scope

    def __str__(self):
        return "<{} {} {}>".format(self.id_, self.type_, self.scope)

    def copy(self):
        return Symbol(self.id_, self.type_, self.scope)

class Symbols:
    def __init__(self):
        self.symbols = {}

    def put(self, id_, type_, scope):
        self.symbols[id_] = Symbol(id_, type_, scope)

    def get(self, id_):
        return self.symbols[id_]

    def contains(self, id_):
        return id_ in self.symbols

    def remove(self, id_):
        del self.symbols[id_]
    
    def __len__(self):
        return len(self.symbols)

    def __str__(self):
        out = ""
        for _, value in self.symbols.items():
            if len(out) > 0:
                out += "\n"
            out += str(value)
        return out

    def __iter__(self):
        return iter(self.symbols.values())

    def __next__(self):
        return next(self.symbols.values())

class Symbolizer(Visitor):
    def __init__(self, ast):
        self.ast = ast

    def visit_Program(self, parent, node):
        node.symbols = Symbols()
        for n in node.nodes:
            self.visit(node, n)

    def visit_Decl(self, parent, node):
        parent.symbols.put(node.id_.value, node.type_.value, id(parent))

    def visit_ArrayDecl(self, parent, node):
        node.symbols = Symbols()
        parent.symbols.put(node.id_.value, node.type_.value, id(parent))

    def visit_ArrayElem(self, parent, node):
        pass

    def visit_Assign(self, parent, node):
        pass

    def visit_If(self, parent, node):
        # node.symbols = parent.symbols
        self.visit(node, node.true)
        if node.false is not None:
            self.visit(node, node.false)

    def visit_While(self, parent, node):
        # node.symbols = parent.symbols
        self.visit(node, node.block)

    def visit_For(self, parent, node):
        # node.symbols = parent.symbols
        self.visit(node, node.block)

    def visit_ForDown(self, parent, node):
        # node.symbols = parent.symbols
        self.visit(node, node.block)

    def visit_Repeat(self, parent, node):
        # node.symbols = parent.symbols
        self.visit(node, node.block)

    def visit_FuncImpl(self, parent, node):
        # node.symbols = parent.symbols
        parent.symbols.put(node.id_.value, node.type_.value, id(parent))
        self.visit(node, node.block)
        self.visit(node, node.params)
        self.visit(node, node.vars)

    def visit_ProcImpl(self, parent, node):
        # node.symbols = parent.symbols
        parent.symbols.put(node.id_.value, None, id(parent))
        self.visit(node, node.block)
        self.visit(node, node.params)
        self.visit(node, node.vars)

    def visit_FuncCall(self, parent, node):
        # node.symbols = parent.symbols
        pass

    def visit_Block(self, parent, node):
        # node.symbols = parent.symbols
        node.symbols = Symbols()
        for n in node.nodes:
            self.visit(node, n)

    def visit_Params(self, parent, node):
        node.symbols = Symbols()
        for p in node.params:
            self.visit(node, p)
            self.visit(parent.block, p)

    def visit_Vars(self, parent, node):
        node.symbols = Symbols()
        for p in node.vars:
            self.visit(node, p)
            self.visit(parent.block, p)

    def visit_Args(self, parent, node):
        pass

    def visit_Elems(self, parent, node):
        pass

    def visit_Break(self, parent, node):
        pass

    def visit_Continue(self, parent, node):
        pass

    def visit_Return(self, parent, node):
        pass

    def visit_Exit(self, parent, node):
        pass

    def visit_Type(self, parent, node):
        pass

    def visit_Int(self, parent, node):
        pass

    def visit_Char(self, parent, node):
        pass

    def visit_String(self, parent, node):
        pass

    def visit_Id(self, parent, node):
        pass

    def visit_Boolean(self, parent, node):
        pass

    def visit_Real(self, parent, node):
        pass

    def visit_BinOp(self, parent, node):
        pass

    def visit_UnOp(self, parent, node):
        pass

    def symbolize(self):
        self.visit(None, self.ast)

import re

class Generator(Visitor):
    def __init__(self, ast):
        self.ast = ast
        self.cText = ""
        self.level = 0
        self.global_ = {}
        self.local = {}
        self.scope = []
        self.call_stack = []
        self.search_new_call = True
        self.return_ = False

    def get_symbol(self, node):
        recursion = self.is_recursion()
        ref = -2 if recursion and not self.search_new_call else -1
        id_ = node.value
        for scope in reversed(self.scope):
            if scope in self.local:
                curr_scope = self.local[scope][ref]
                if id_ in curr_scope:
                    return curr_scope[id_]
        return self.global_[id_]

    def init_scope(self, node):
        scope = id(node)
        if scope not in self.local:
            self.local[scope] = []
        self.local[scope].append({})
        for s in node.symbols:
            self.local[scope][-1][s.id_] = s.copy()

    def clear_scope(self, node):
        scope = id(node)
        self.local[scope].pop()

    def is_recursion(self):
        if len(self.call_stack) > 0:
            curr_call = self.call_stack[-1]
            prev_calls = self.call_stack[:-1]
            for call in reversed(prev_calls):
                if call == curr_call:
                    return True
        return False

    def append(self, text):
        self.cText += str(text)

    def newline(self):
        self.append('\n\r')

    def indent(self):
        for i in range(self.level):
            self.append('\t')

    def visit_Program(self, parent, node):
        for s in node.symbols:
            self.global_[s.id_] = s.copy()
        flag = 0
        for n in node.nodes:
            if type(n).__name__ == "ProcImpl" or type(n).__name__ == "FuncImpl":
                self.visit(node, n)
            else:
                if flag == 0:
                    self.append("int main() {")
                    self.newline()
                    flag+=1
                self.visit(node, n)

        self.level += 1
        self.indent()
        self.append("return 0;")
        self.newline()
        self.level -=1
        self.append("}")

    def visit_Decl(self, parent, node):
        self.level += 1
        self.indent()
        self.visit(node, node.type_)
        self.append(' ')
        self.visit(node, node.id_)
        self.append(';')
        self.level -= 1
        self.newline()

    def visit_ArrayDecl(self, parent, node):
        self.level += 1
        self.indent()
        self.visit(node, node.type_)
        self.append(' ')
        self.visit(node, node.id_)
        if node.size is not None:
            self.append('[')
            self.visit(node, node.size)
            self.append(']')
        elif node.elems is not None:
            self.append('[] = { ')
            self.visit(node, node.elems)
            self.append(' }')
        self.append(';')
        self.level -= 1
        self.newline()

    def visit_ArrayElem(self, parent, node):
        self.visit(node, node.id_)
        self.append('[')
        self.visit(node, node.index)
        self.append(']')

    def visit_Assign(self, parent, node):
        self.visit(node, node.id_)
        self.append(' = ')
        self.visit(node, node.expr)
        # self.append(';')

    def visit_If(self, parent, node):
        self.append('if(')
        self.visit(node, node.cond)
        self.append(') {')
        self.newline()
        self.init_scope(node.true)
        self.visit(node, node.true)
        self.clear_scope(node.true)
        self.indent()
        if node.false is not None:
            self.append('} else {')
            self.newline()
            self.init_scope(node.false)
            self.visit(node, node.false)
            self.clear_scope(node.false)
            self.indent()
        self.append('}')

    def visit_While(self, parent, node):
        self.append('while(')
        self.visit(node, node.cond)
        self.append(') {')
        self.newline()
        self.init_scope(node.block)
        self.visit(node, node.block)
        self.clear_scope(node.block)
        self.indent()
        self.append("}")

    def visit_For(self, parent, node):
        self.append("for(")
        self.visit(node, node.init)
        if type(node.init).__name__ == "Int":
            self.append(f"; {node.init.value} <= ")
        else:
            self.append(f"; {node.init.id_.value} <= ")
        self.visit(node, node.endExpr)
        if type(node.init).__name__ == "Int":
            self.append(f"; {node.init.value}++)")
        else:
            self.append(f"; {node.init.id_.value}++)")
        self.append(" {")
        self.newline()
        self.init_scope(node.block)
        self.visit(node, node.block)
        self.clear_scope(node.block)
        self.indent()
        self.append("}")

    def visit_ForDown(self, parent, node):
        self.append("for(")
        self.visit(node, node.init)
        if type(node.init).__name__ == "Int":
            self.append(f"; {node.init.value} >= ")
        else:
            self.append(f"; {node.init.id_.value} >= ")
        self.visit(node, node.endExpr)
        if type(node.init).__name__ == "Int":
            self.append(f"; {node.init.value}--)")
        else:
            self.append(f"; {node.init.id_.value}--)")
        self.append(" {")
        self.newline()
        self.init_scope(node.block)
        self.visit(node, node.block)
        self.clear_scope(node.block)
        self.indent()
        self.append("}")

    def visit_Repeat(self, parent, node):
        self.append('do {')
        self.newline()
        self.init_scope(node.block)
        self.visit(node, node.block)
        self.clear_scope(node.block)
        self.indent()
        self.append("} while(")
        if type(node.cond).__name__ == "Boolean":
            self.append("1")
        else:
            self.visit(node, node.cond)
        self.append(');')

    def visit_FuncImpl(self, parent, node):
        self.visit(node, node.type_)
        self.append(" " + node.id_.value)
        self.append('(')
        self.visit(node, node.params)
        self.append(') {')
        self.newline()
        if node.vars is not None:
            self.visit(node, node.vars)
            self.newline()
        self.visit(node, node.block)
        self.append("}")
        self.newline()

    def visit_ProcImpl(self, parent, node):
        self.append('void ')
        self.append(node.id_.value)
        self.append('(')
        self.visit(node, node.params)
        self.append(') {')
        self.newline()
        if node.vars is not None:
            self.visit(node, node.vars)
            self.newline()
        self.visit(node, node.block)
        self.append("}")
        self.newline()

    def visit_FuncCall(self, parent, node):
        id = node.id_.value
        args = node.args.args
        if id == "writeln" or id == "write":
            self.append("printf(\"")
            expressions = []
            for a in args:
                if type(a).__name__ == "Id":
                    expressions.append(a)
                    simbol = self.get_symbol(a.id_.value)
                    if simbol.type_ == "integer":
                        self.append("%d")
                    elif simbol.type_ == "char":
                        self.append("%c")
                    elif simbol.type_ == "string":
                        self.append("%s")
                    elif simbol.type_ == "real":
                        if node.args.dec is not None:
                            self.append(f".{node.args.dec.value}")
                        self.append("%f")
                    else:
                        self.append("greska")
                elif type(a).__name__ == "ArrayElem":
                    expressions.append(a)
                    simbol = self.get_symbol(a.id_.value)
                    if simbol.type_ == "integer":
                        self.append("%d")
                    elif simbol.type_ == "char":
                        self.append("%c")
                    elif simbol.type_ == "string":
                        self.append("%s")
                    elif simbol.type_ == "real":
                        if node.args.dec is not None:
                            self.append(f".{node.args.dec.value}")
                        self.append("%f")
                    else:
                        self.append("greska")
                elif type(a).__name__ == "BinOp":
                    expressions.append(a)
                    if node.args.dec is not None:
                        self.append(f"%.{node.args.dec.value}f")
                    else:
                        self.append("%d")
                elif type(a).__name__ == "FuncCall":
                    expressions.append(a)
                    if a.id_.value == "chr":
                        self.append("%c")
                    else:
                        self.append("%d")
                else: 
                    self.visit(node.args, a)
            if id == "writeln":
                self.append('\\n')
            self.append('"')
            for i, e in enumerate(expressions):
                self.append(', ')
                self.visit(node.args, e)
            self.append(")")
        elif id == "read" or id == "readln":
            self.append("scanf(\"")
            expressions = []
            for a in args:
                expressions.append(a)
                if type(a).__name__ == "Id":
                    simbol = self.get_symbol(a)
                    if simbol.type_ == "integer":
                        self.append("%d")
                    elif simbol.type_ == "char":
                        self.append("%c")
                    elif simbol.type_ == "string":
                        self.append("%s")
                    elif simbol.type_ == "real":
                        self.append("%f")
                    else:
                        self.append("greska")
                else:
                    simbol = self.get_symbol(a.id_.value)
                    if simbol.type_ == "integer":
                        self.append("%d")
                    elif simbol.type_ == "char":
                        self.append("%c")
                    elif simbol.type_ == "string":
                        self.append("%s")
                    elif simbol.type_ == "real":
                        self.append("%f")
                    else:
                        self.append("greska")
            self.append('"')
            for i, e in enumerate(expressions):
                self.append(', &')
                self.visit(node.args, e)
            self.append(")")
        elif id == "length":
            self.append("strlen(")
            self.visit(node, node.args)
            self.append(")")
        # elif id == "insert":
        #     self.append("strlen(")
        #     self.visit(node, node.args)
        #     self.append(")")
        elif id == "inc":
            self.visit(node, node.args)
            self.append("++")
        elif id == "dec":
            self.visit(node, node.args)
            self.append("--")
        elif id == "ord":
            self.visit(node, node.args)
        elif id == "chr":
            self.visit(node, node.args)
        else:
            self.append(id)
            self.append('(')
            self.visit(node, node.args)
            self.append(')')

    def visit_Block(self, parent, node):
        scope = id(node)
        self.scope.append(scope)
        self.level += 1
        for n in node.nodes:
            self.indent()
            self.visit(node, n)
            if type(n).__name__ != "If" and type(n).__name__ != "For" and type(n).__name__ != "While" and type(n).__name__ != "Repeat":
                self.append(";")
            self.newline()
        self.level -= 1
        self.scope.pop()

    def visit_Params(self, parent, node):
        for i, p in enumerate(node.params):
            if i > 0:
                self.append(', ')
            self.visit(p, p.type_)
            self.append(" ")
            self.visit(p, p.id_)

    def visit_Args(self, parent, node):
        for i, a in enumerate(node.args):
            if i > 0:
                self.append(', ')
            if type(a).__name__ == "Char":
                self.append(f"'{a.value}'")
            else:
                self.visit(node, a)

    def visit_Elems(self, parent, node):
        for i, e in enumerate(node.elems):
            if i > 0:
                self.append(', ')
            self.visit(node, e)

    def visit_Vars(self, parent, node):
        self.level += 1
        for i, v in enumerate(node.vars):
            self.indent()
            self.visit(v, v.type_)
            self.append(" ")
            self.visit(v, v.id_)
            self.append(";")
            self.newline()
        self.level -= 1

    def visit_Break(self, parent, node):
        self.append('break')

    def visit_Continue(self, parent, node):
        self.append('continue')

    def visit_Exit(self, parent, node):
        self.append('return')
        if node.expr is not None:
            self.append(' ')
            self.visit(node, node.expr)

    def visit_Return(self, parent, node):
        self.append('return')
        if node.expr is not None:
            self.append(' ')
            self.visit(node, node.expr)

    def visit_Type(self, parent, node):
        if node.value == "integer":
            self.append("int")
        elif node.value == "real":
            self.append("float")
        else:
            self.append(node.value)

    def visit_Int(self, parent, node):
        self.append(node.value)

    def visit_Char(self, parent, node):
        self.append(node.value)

    def visit_String(self, parent, node):
        self.append(node.value)

    def visit_Boolean(self, parent, node):
        self.append(node.value)

    def visit_Id(self, parent, node):
        self.append(node.value)

    def visit_BinOp(self, parent, node):
        if type(node.first).__name__ == "Char":
            self.append(f"'{node.first.value}'")
        else:
            self.visit(node, node.first)
        if node.symbol == 'and':
            self.append(' && ')
        elif node.symbol == 'or':
            self.append(' || ')
        elif node.symbol == 'xor':
            self.append(' ^ ')
        elif node.symbol == 'mod':
            self.append(' % ')
        elif node.symbol == 'div':
            self.append(' / ')
        elif node.symbol == '=':
            self.append(' == ')
        else:
            self.append(" " + node.symbol + " ")
        if type(node.second).__name__ == "Char":
            self.append(f"'{node.second.value}'")
        else:
            self.visit(node, node.second)

    def visit_UnOp(self, parent, node):
        if node.symbol == '!':
            self.append('not ')
        elif node.symbol != '&':
            self.append(node.symbol)
        self.visit(node, node.first)

    def generate(self, path):
        self.visit(None, self.ast)
        self.cText = re.sub('\n\s*\n', '\n', self.cText)
        with open(path, 'w') as source:
            source.write(self.cText)
        return path

class Runner(Visitor):
    def __init__(self, ast):
        self.ast = ast
        self.global_ = {}
        self.local = {}
        self.scope = []
        self.call_stack = []
        self.search_new_call = True
        self.return_ = False

    def get_symbol(self, node):
        recursion = self.is_recursion()
        ref = -2 if recursion and not self.search_new_call else -1
        id_ = node.value
        for scope in reversed(self.scope):
            if scope in self.local:
                curr_scope = self.local[scope][ref]
                if id_ in curr_scope:
                    return curr_scope[id_]
        return self.global_[id_]

    def init_scope(self, node):
        scope = id(node)
        if scope not in self.local:
            self.local[scope] = []
        self.local[scope].append({})
        for s in node.symbols:
            self.local[scope][-1][s.id_] = s.copy()

    def clear_scope(self, node):
        scope = id(node)
        self.local[scope].pop()

    def is_recursion(self):
        if len(self.call_stack) > 0:
            curr_call = self.call_stack[-1]
            prev_calls = self.call_stack[:-1]
            for call in reversed(prev_calls):
                if call == curr_call:
                    return True
        return False

    def visit_Program(self, parent, node):
        for s in node.symbols:
            self.global_[s.id_] = s.copy()
        for n in node.nodes:
            self.visit(node, n)

    def visit_Decl(self, parent, node):
        id_ = self.get_symbol(node.id_)
        id_.value = None

    def visit_ArrayDecl(self, parent, node):
        id_ = self.get_symbol(node.id_)
        id_.symbols = node.symbols
        size, elems = node.size, node.elems
        if elems is not None:
            self.visit(node, elems)
        elif size is not None:
            for i in range(size.value):
                id_.symbols.put(i, id_.type_, None)
                id_.symbols.get(i).value = None

    def visit_ArrayElem(self, parent, node):
        id_ = self.get_symbol(node.id_)
        index = self.visit(node, node.index)
        return id_.symbols.get(index.value)

    def visit_Assign(self, parent, node):
        id_ = self.visit(node, node.id_)
        value = self.visit(node, node.expr)
        if isinstance(value, Symbol):
            value = value.value
        id_.value = value
        print("assign", id_, id_.value)

    def visit_If(self, parent, node):
        cond = self.visit(node, node.cond)
        if cond:
            self.init_scope(node.true)
            self.visit(node, node.true)
            self.clear_scope(node.true)
        else:
            if node.false is not None:
                self.init_scope(node.false)
                self.visit(node, node.false)
                self.clear_scope(node.false)

    def visit_While(self, parent, node):
        cond = self.visit(node, node.cond)
        while cond:
            self.init_scope(node.block)
            self.visit(node, node.block)
            self.clear_scope(node.block)
            cond = self.visit(node, node.cond)

    def visit_For(self, parent, node):
        self.visit(node, node.init)
        cond = self.visit(node, node.cond)
        while cond:
            self.init_scope(node.block)
            self.visit(node, node.block)
            self.clear_scope(node.block)
            self.visit(node, node.step)
            cond = self.visit(node, node.cond)

    def visit_FuncImpl(self, parent, node):
        id_ = self.get_symbol(node.id_)
        id_.params = node.params
        id_.block = node.block
        id_.vars = node.vars
        # if node.id_.value == 'main':
        #     self.call_stack.append(node.id_.value)
        #     self.init_scope(node.block)
        #     self.visit(node, node.block)
        #     self.clear_scope(node.block)
        #     self.call_stack.pop()

    def visit_ProcImpl(self, parent, node):
        id_ = self.get_symbol(node.id_)
        id_.params = node.params
        id_.block = node.block
        id_.vars = node.vars

    def visit_FuncCall(self, parent, node):
        func = node.id_.value
        args = node.args.args
        if func == 'write' or func == "writeln":
            zaIspis = ""
            nesto = ""
            for arg in args:
                if type(arg).__name__ == "BinOp":
                    rezultat = self.visit(node.args, arg)
                    if node.args.dec is not None:
                        decimale = self.visit(node.args, node.args.dec)
                        rezultat = round(rezultat, 2)
                    zaIspis += f"{rezultat}"
                elif type(arg).__name__ == "Char":
                    zaIspis += arg.value
            print(zaIspis)
        elif func == 'readln' or func == 'read':
            inputs = input().split()
            for arg, inp in zip(args, inputs):
                arg = self.get_symbol(arg)
                arg.value = inp
        elif func == 'strlen':
            a = args[0]
            if isinstance(a, String):
                return len(a.value)
            elif isinstance(a, Id):
                id_ = self.visit(node.args, a)
                return len(id_.symbols)
        elif func == 'strcat':
            a, b = args[0], args[1]
            dest = self.get_symbol(a)
            values = []
            if isinstance(b, Id):
                src = self.get_symbol(b)
                elems = [s.value for s in src.symbols]
                non_nulls = [c for c in elems if c is not None]
                values = [c for c in non_nulls]
            elif isinstance(b, String):
                values = [ord(c) for c in b.value]
            i = len(dest.symbols)
            for v in values:
                dest.symbols.put(i, dest.type_, None)
                dest.symbols.get(i).value = v
                i += 1
        else:
            impl = self.global_[func]
            self.call_stack.append(func)
            self.init_scope(impl.block)
            self.visit(node, node.args)
            result = self.visit(node, impl.block)
            self.clear_scope(impl.block)
            self.call_stack.pop()
            self.return_ = False
            return result

    def visit_Block(self, parent, node):
        result = None
        scope = id(node)
        self.scope.append(scope)
        # if len(self.local[scope]) > 5:
        #     exit(0)
        for n in node.nodes:
            if self.return_:
                break
            if isinstance(n, Break):
                break
            elif isinstance(n, Continue):
                continue
            elif isinstance(n, Return):
                self.return_ = True
                if n.expr is not None:
                    result = self.visit(n, n.expr)
            else:
                self.visit(node, n)
        self.scope.pop()
        return result

    def visit_Params(self, parent, node):
        pass

    def visit_Vars(self, parent, node):
        pass

    def visit_Args(self, parent, node):
        func = parent.id_.value
        impl = self.global_[func]
        scope = id(impl.block)
        self.scope.append(scope)
        for p, a in zip(impl.params.params, node.args):
            self.search_new_call = False
            arg = self.visit(impl.block, a)
            # print("Cao", arg, arg.value)
            print("parametar -->", p, "argument -->", arg)
            self.search_new_call = True
            id_ = self.visit(impl.block, p.id_)
            id_.value = arg
            if isinstance(arg, Symbol):
                print("cao", arg.value)
                id_.value = arg.value
            print("parametar -->", id_, id_.value, "argument -->", arg)
        self.scope.pop()

    def visit_Elems(self, parent, node):
        id_ = self.get_symbol(parent.id_)
        for i, e in enumerate(node.elems):
            value = self.visit(node, e)
            id_.symbols.put(i, id_.type_, None)
            id_.symbols.get(i).value = value

    def visit_Break(self, parent, node):
        pass

    def visit_Continue(self, parent, node):
        pass

    def visit_Return(self, parent, node):
        pass

    def visit_Type(self, parent, node):
        pass

    def visit_Int(self, parent, node):
        return node.value

    def visit_Char(self, parent, node):
        return ord(node.value)

    def visit_String(self, parent, node):
        return node.value

    def visit_Id(self, parent, node):
        return self.get_symbol(node)

    def returnType(self, var):
        if type(var).__name__ == "int" or type(var).__name__ == "integer":
            return int(var)
        elif type(var).__name__ == "Symbol":
            return int(var.value)
        elif "." in var:
            return float(var)
        return int(var)

    def visit_BinOp(self, parent, node):
        first = self.visit(node, node.first)
        if isinstance(first, Symbol):
            print("simbnol", first, first.value)
            first = first.value
        second = self.visit(node, node.second)
        if isinstance(second, Symbol):
            second = second.value
        if node.symbol == '+':
            return self.returnType(first) + self.returnType(second)
        elif node.symbol == '-':
            return self.returnType(first) - self.returnType(second)
        elif node.symbol == '*':
            return self.returnType(first) * self.returnType(second)
        elif node.symbol == '/':
            return self.returnType(first) / self.returnType(second)
        elif node.symbol == 'div':
            return self.returnType(first) // self.returnType(second)
        elif node.symbol == 'mod':
            return self.returnType(first) % self.returnType(second)
        elif node.symbol == '==':
            return first == second
        elif node.symbol == '!=':
            return first != second
        elif node.symbol == '<':
            return self.returnType(first) < self.returnType(second)
        elif node.symbol == '>':
            return self.returnType(first) > self.returnType(second)
        elif node.symbol == '<=':
            return self.returnType(first) <= self.returnType(second)
        elif node.symbol == '>=':
            return self.returnType(first) >= self.returnType(second)
        elif node.symbol == '&&':
            bool_first = first != 0
            bool_second = second != 0
            return bool_first and bool_second
        elif node.symbol == '||':
            bool_first = first != 0
            bool_second = second != 0
            return bool_first or bool_second
        else:
            return None

    def visit_UnOp(self, parent, node):
        first = self.visit(node, node.first)
        backup_first = first
        if isinstance(first, Symbol):
            first = first.value
        if node.symbol == '-':
            return -first
        elif node.symbol == '!':
            bool_first = first != 0
            return not bool_first
        elif node.symbol == '&':
            return backup_first
        else:
            return None

    def run(self):
        self.visit(None, self.ast)

"""Testiranje implementacije"""

test_id = "04"
path = f'./Druga faza/{test_id}/src.pas'

# 171.925 693.365
with open(path, 'r') as source:
    text = source.read()

    lexer = Lexer(text)
    tokens = lexer.lex()

    parser = Parser(tokens)
    ast = parser.parse()

    symbolizer = Symbolizer(ast)
    symbolizer.symbolize()

    # grapher = Grapher(ast)
    # img = grapher.graph()

    generator = Generator(ast)
    code = generator.generate('main.py')
    
    runner = Runner(ast)
    runner.run()


# Image(img)
# !cat '{code}'
